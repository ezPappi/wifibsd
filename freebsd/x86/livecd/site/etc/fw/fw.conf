# Stateful network firewall rules for IPFW with NAT
# By yazzy@yazzy.org
#
# Define your variables
#
fwcmd="/sbin/ipfw"      #leave as is if using ipfw
flags="-q"

oif="sis0"		#set to external interface name
iif1="sis1"		#set to internal interface name
iif2="sis2"		#DMZ interface name	
wifi1="ath0"		#set to the 1.st wireless interface 
wifi2="ath1"		#set to the 2.nd wireless interface

nic1=`ifconfig -l | cut -f 1 -d " "`	
nic2=`ifconfig -l | cut -f 2 -d " "`	
nic3=`ifconfig -l | cut -f 3 -d " "`
nic4=`ifconfig -l | cut -f 4 -d " "`
nic5=`ifconfig -l | cut -f 5 -d " "`

[ $nic1 = sis0 ] && oip=`ifconfig ${oif}|grep inet|head -1 |cut -f 2 -d " "`
[ $nic2 = sis0 ] && oip=`ifconfig ${oif}|grep inet|head -1 |cut -f 2 -d " "`

[ $nic2 = sis1 ] && iip1=`ifconfig ${iif1}|grep inet|head -1 |cut -f 2 -d " "`
[ $nic3 = sis1 ] && iip1=`ifconfig ${iif1}|grep inet|head -1 |cut -f 2 -d " "`

[ $nic3 = sis2 ] && iip2=`ifconfig ${iif2}|grep inet|head -1 |cut -f 2 -d " "`
[ $nic4 = sis2 ] && iip2=`ifconfig ${iif2}|grep inet|head -1 |cut -f 2 -d " "`

LAN_VAR="{$iip1} | sed -e 's/1$/0/g'"
LAN=${LAN_VAR}"/24"	#set to internal network range

DMZ_VAR="{$iip2} | sed -e 's/1$/0/g'"
DMZ="${DMZ_VAR}"/24""    #set to internal network range


#case "$1" in
#    start)

echo -n "Setting up firewall rules:"

#       Force a flush of the current firewall rules before we reload
$fwcmd $flags -f flush

###########################
#   THE FIREWALL RULES:   #
###########################

#       Allow our loop back to work
        $fwcmd $flags add allow all from any to any via lo0
#
#       Prevent spoofing of our loopback
        $fwcmd $flags add deny all from any to 127.0.0.0/8

#       Stop spoofing of our internal network range
        $fwcmd $flags add deny ip from $LAN to any in via $oif
        $fwcmd $flags add deny ip from $DMZ to any in via $oif

#       Stop spoofing from inside our private ip range
        $fwcmd $flags add deny ip from not $LAN to any in via $iif1
        $fwcmd $flags add deny ip from not $DMZ1 to any in via $iif2

        #Stop private networks (RFC1918) from entering the outside interface.
        $fwcmd $flags add deny ip from 192.168.0.0/16 to any in via $oif
        $fwcmd $flags add deny ip from 172.16.0.0/12 to any in via $oif
        $fwcmd $flags add deny ip from 10.0.0.0/8 to any in via $oif
        $fwcmd $flags add deny ip from any to 192.168.0.0/16 in via $oif
        $fwcmd $flags add deny ip from any to 172.16.0.0/12 in via $oif
        $fwcmd $flags add deny ip from any to 10.0.0.0/8 in via $oif
#
#
#       Stop draft-manning-dsua-01.txt nets on the outside interface
        $fwcmd $flags add deny all from 0.0.0.0/8 to any in via $oif
        $fwcmd $flags add deny all from 169.254.0.0/16 to any in via $oif
        $fwcmd $flags add deny all from 192.0.2.0/24 to any in via $oif
        $fwcmd $flags add deny all from 224.0.0.0/4 to any in via $oif
        $fwcmd $flags add deny all from 240.0.0.0/4 to any in via $oif
        $fwcmd $flags add deny all from any to 0.0.0.0/8 in via $oif
        $fwcmd $flags add deny all from any to 169.254.0.0/16 in via $oif
        $fwcmd $flags add deny all from any to 192.0.2.0/24 in via $oif
        $fwcmd $flags add deny all from any to 224.0.0.0/4 in via $oif
        $fwcmd $flags add deny all from any to 240.0.0.0/4 in via $oif

#       Reject broadcasts from outside interface
#       ARP is not an IP
#       protocol so they are not effected by the rule. In fact IIRC, since ARP
#       packets do not even have source or desitnation IPs (they use the MAC
#       addresses and the MAC broadcast, ff:ff:ff:ff:ff:ff), the only ipfw
#       rule that can catch them is `<action> all from any to any`.
        $fwcmd $flags add 63000 deny ip from any to 0.0.0.255:0.0.0.255 in via $oif

#       Divert all packets through natd
        $fwcmd $flags add divert natd all from any to any via $oif
#
#       Allow all established connections to persist (setup required
#       for new connections).
        $fwcmd $flags add allow tcp from any to any established
        $fwcmd $flags add check-state

#	Allow required ICMP
#
#	3 Desintation Unreachable and all its sub types
#	4 Source Quench and its subtypes
#	11 time exceeded 
#	12 bad header
	$fwcmd $flags add allow icmp from any to any icmptypes 3,4,11,12

#       Allow ssh in from any to our outside IP.
        $fwcmd $flags add pass tcp from any to {$oip} 22 setup  

#------------------------------------------------------------------------
# Dynamic rules
#------------------------------------------------------------------------
#       Checks packets against dynamic rule set below.
        $fwcmd $flags add check-state

#       Allow any traffic from firewall ip's to any going out the
#       external interface
        $fwcmd $flags add allow ip from $oip to any keep-state out via $oif

#       Allow any traffic from local networks to any passing through the
#       internal interface
        $fwcmd $flags add allow ip from $LAN to any keep-state via $iif1

#
#------------------------------------------------------------------------
# End of the rules
#------------------------------------------------------------------------
#       Deny everything else
        $fwcmd $flags add 65534 deny ip from any to any
#       
# End firewall script.

#        echo ""
#        ;;
#   stop)
#        echo -n "Shutting down firewall rules..."
#        $fwcmd $flags -f flush
#        echo ""
#        ;;
#   *)
#        echo "Usage: firewall {start|stop}"
#        exit 1
#esac
#exit 0
